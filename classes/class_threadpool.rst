:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/api/classes/ThreadPool.xml.

.. _class_ThreadPool:

ThreadPool
==========

**Inherits:** 

Resource that allows executing methods in a thread pool

.. rst-class:: classref-introduction-group

Description
-----------

By default, the thread pool will create a thread for each detected core on the running machine. Each thread sleeps until a task is queued when :ref:`exec<class_ThreadPool_method_exec>` is called. When a task is queued, a thread will wake up and start working on the task until it is completed.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +-------------------------------------+-------------------------------------------------------+------------------+
   | :ref:`Log.Logger<class_Log.Logger>` | :ref:`logger<class_ThreadPool_property_logger>`       |                  |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | Mutex                               | :ref:`mutex<class_ThreadPool_property_mutex>`         |                  |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | String                              | :ref:`name<class_ThreadPool_property_name>`           | ``"ThreadPool"`` |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | Array                               | :ref:`queue<class_ThreadPool_property_queue>`         |                  |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | bool                                | :ref:`running<class_ThreadPool_property_running>`     | ``false``        |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | Semaphore                           | :ref:`semaphore<class_ThreadPool_property_semaphore>` |                  |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | int                                 | :ref:`size<class_ThreadPool_property_size>`           |                  |
   +-------------------------------------+-------------------------------------------------------+------------------+
   | Array                               | :ref:`threads<class_ThreadPool_property_threads>`     |                  |
   +-------------------------------------+-------------------------------------------------------+------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +------+------------------------------------------------------------------------------------------------------------------------+
   | void | :ref:`_async_call<class_ThreadPool_method__async_call>` **(** :ref:`ThreadPool.Task<class_ThreadPool.Task>` task **)** |
   +------+------------------------------------------------------------------------------------------------------------------------+
   | void | :ref:`_notification<class_ThreadPool_method__notification>` **(** int what **)**                                       |
   +------+------------------------------------------------------------------------------------------------------------------------+
   | void | :ref:`_process<class_ThreadPool_method__process>` **(** int id **)**                                                   |
   +------+------------------------------------------------------------------------------------------------------------------------+
   | void | :ref:`exec<class_ThreadPool_method_exec>` **(** Callable method **)**                                                  |
   +------+------------------------------------------------------------------------------------------------------------------------+
   | bool | :ref:`is_running<class_ThreadPool_method_is_running>` **(** **)**                                                      |
   +------+------------------------------------------------------------------------------------------------------------------------+
   | void | :ref:`start<class_ThreadPool_method_start>` **(** **)**                                                                |
   +------+------------------------------------------------------------------------------------------------------------------------+
   | void | :ref:`stop<class_ThreadPool_method_stop>` **(** **)**                                                                  |
   +------+------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Signals
-------

.. _class_ThreadPool_signal_exec_completed:

.. rst-class:: classref-signal

**exec_completed** **(** :ref:`ThreadPool.Task<class_ThreadPool.Task>` task **)**

.. container:: contribute

	There is currently no description for this signal. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_ThreadPool_property_logger:

.. rst-class:: classref-property

:ref:`Log.Logger<class_Log.Logger>` **logger**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_mutex:

.. rst-class:: classref-property

Mutex **mutex**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_name:

.. rst-class:: classref-property

String **name** = ``"ThreadPool"``

Name of the thread pool

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_queue:

.. rst-class:: classref-property

Array **queue**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_running:

.. rst-class:: classref-property

bool **running** = ``false``

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_semaphore:

.. rst-class:: classref-property

Semaphore **semaphore**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_size:

.. rst-class:: classref-property

int **size**

Number of threads to create in the thread pool

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_property_threads:

.. rst-class:: classref-property

Array **threads**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_ThreadPool_method__async_call:

.. rst-class:: classref-method

void **_async_call** **(** :ref:`ThreadPool.Task<class_ThreadPool.Task>` task **)**

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_method__notification:

.. rst-class:: classref-method

void **_notification** **(** int what **)**

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_method__process:

.. rst-class:: classref-method

void **_process** **(** int id **)**

Each thread in the pool waits for tasks and executes methods from the queue

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_method_exec:

.. rst-class:: classref-method

void **exec** **(** Callable method **)**

Calls the given method from the thread pool. Internally, this queues the given method and awaits it to be called during the process loop. You should await this method if your method returns something. E.g. ``var result = await thread_pool.exec(myfund.bind("myarg"))``

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_method_is_running:

.. rst-class:: classref-method

bool **is_running** **(** **)**

Returns whether or not the thread pool is running

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_method_start:

.. rst-class:: classref-method

void **start** **(** **)**

Starts the threads for the thread pool

.. rst-class:: classref-item-separator

----

.. _class_ThreadPool_method_stop:

.. rst-class:: classref-method

void **stop** **(** **)**

Stops the thread pool

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
