:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/api/classes/HandheldGamepad.xml.

.. _class_HandheldGamepad:

HandheldGamepad
===============

**Inherits:** :ref:`ManagedGamepad<class_ManagedGamepad>`

.. container:: contribute

	There is currently no description for this class. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +---------------------------------------+------------------------------------------------------------------+
   | Array                                 | :ref:`active_keys<class_HandheldGamepad_property_active_keys>`   |
   +---------------------------------------+------------------------------------------------------------------+
   | :ref:`DeviceHider<class_DeviceHider>` | :ref:`device_hider<class_HandheldGamepad_property_device_hider>` |
   +---------------------------------------+------------------------------------------------------------------+
   | Array                                 | :ref:`keypads<class_HandheldGamepad_property_keypads>`           |
   +---------------------------------------+------------------------------------------------------------------+
   | :ref:`Platform<class_Platform>`       | :ref:`platform<class_HandheldGamepad_property_platform>`         |
   +---------------------------------------+------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void  | :ref:`_check_mapped_events<class_HandheldGamepad_method__check_mapped_events>` **(** float value, float delta **)**                                               |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | bool  | :ref:`_filter_event<class_HandheldGamepad_method__filter_event>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**                                            |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | int   | :ref:`_find_active_key<class_HandheldGamepad_method__find_active_key>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**                                      |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | int   | :ref:`_find_updatable_key<class_HandheldGamepad_method__find_updatable_key>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**                                |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void  | :ref:`_init<class_HandheldGamepad_method__init>` **(** **)**                                                                                                      |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void  | :ref:`_on_key_down<class_HandheldGamepad_method__on_key_down>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**                                              |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | bool  | :ref:`_on_key_up<class_HandheldGamepad_method__on_key_up>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event, float delta **)**                                     |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void  | :ref:`_process_event<class_HandheldGamepad_method__process_event>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event, float delta **)**                             |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | bool  | :ref:`_sort_events<class_HandheldGamepad_method__sort_events>` **(** :ref:`EvdevEvent<class_EvdevEvent>` event1, :ref:`EvdevEvent<class_EvdevEvent>` event2 **)** |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | Array | :ref:`get_capabilities<class_HandheldGamepad_method_get_capabilities>` **(** **)**                                                                                |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void  | :ref:`process_input<class_HandheldGamepad_method_process_input>` **(** **)**                                                                                      |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void  | :ref:`setup<class_HandheldGamepad_method_setup>` **(** Array keyboards **)**                                                                                      |
   +-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_HandheldGamepad_property_active_keys:

.. rst-class:: classref-property

Array **active_keys**

List of keys and their values that are currently pressed.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_property_device_hider:

.. rst-class:: classref-property

:ref:`DeviceHider<class_DeviceHider>` **device_hider**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_property_keypads:

.. rst-class:: classref-property

Array **keypads**

The physical keyboard/mouse device we are mapping input from.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_property_platform:

.. rst-class:: classref-property

:ref:`Platform<class_Platform>` **platform**

.. container:: contribute

	There is currently no description for this property. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_HandheldGamepad_method__check_mapped_events:

.. rst-class:: classref-method

void **_check_mapped_events** **(** float value, float delta **)**

Called after processing all events in the event loop. Checks if our current active_keys matches any of our mapped events.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__filter_event:

.. rst-class:: classref-method

bool **_filter_event** **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__find_active_key:

.. rst-class:: classref-method

int **_find_active_key** **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**

Returns the index of an active key.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__find_updatable_key:

.. rst-class:: classref-method

int **_find_updatable_key** **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**

Returns the index of an active key who's value does not match.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__init:

.. rst-class:: classref-method

void **_init** **(** **)**

.. container:: contribute

	There is currently no description for this method. Please help us by :ref:`contributing one <doc_updating_the_class_reference>`!

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__on_key_down:

.. rst-class:: classref-method

void **_on_key_down** **(** :ref:`EvdevEvent<class_EvdevEvent>` event **)**

Called for key down events.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__on_key_up:

.. rst-class:: classref-method

bool **_on_key_up** **(** :ref:`EvdevEvent<class_EvdevEvent>` event, float delta **)**

Called for key up events.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__process_event:

.. rst-class:: classref-method

void **_process_event** **(** :ref:`EvdevEvent<class_EvdevEvent>` event, float delta **)**

Called to handle an individual event. Sets the active keys.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method__sort_events:

.. rst-class:: classref-method

bool **_sort_events** **(** :ref:`EvdevEvent<class_EvdevEvent>` event1, :ref:`EvdevEvent<class_EvdevEvent>` event2 **)**

Custom sort method that returns true if the first EvdevEvent is less than the second EvdevEvent.  Checks type, then code, then value.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method_get_capabilities:

.. rst-class:: classref-method

Array **get_capabilities** **(** **)**

Returns the capabilities of the gamepad

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method_process_input:

.. rst-class:: classref-method

void **process_input** **(** **)**

Main process thread for input translation from one device to another.

.. rst-class:: classref-item-separator

----

.. _class_HandheldGamepad_method_setup:

.. rst-class:: classref-method

void **setup** **(** Array keyboards **)**

Setup the given keyboard devices for the handheld gamepad

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
